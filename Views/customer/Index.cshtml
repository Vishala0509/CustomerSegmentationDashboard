@model List<CustomerSegmentationDashboard.Models.CustomerSegment>

@{
    ViewData["Title"] = "Dashboard";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container my-4">
    <h2 class="mb-4 text-primary">@ViewData["Title"]</h2>

    <!-- Cluster Selection -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="clusterSelect" class="form-label fw-semibold">Select Cluster:</label>
            <select id="clusterSelect" class="form-select" onchange="updateDashboard(this.value)">
                <option value="all">All</option>
                @foreach (var clusterId in Model.Select(c => c.Cluster).Distinct())
                {
                    <option value="@clusterId">Cluster @clusterId</option>
                }
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-success shadow-sm" onclick="downloadCSV()">
                <i class="bi bi-download me-1"></i>Download CSV
            </button>
        </div>
    </div>

    <!-- KPI Summary -->
    <div class="card p-3 mb-4 shadow-sm bg-light border-start border-4 border-primary">
        <h5 class="card-title text-primary mb-3">Cluster KPIs</h5>
        <div class="row text-center">
            <div class="col-md-4">
                <div class="p-2 rounded bg-primary text-white">
                    <strong>Average Recency:</strong> <span id="avgRecency">-</span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="p-2 rounded bg-success text-white">
                    <strong>Average Frequency:</strong> <span id="avgFrequency">-</span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="p-2 rounded bg-warning text-dark">
                    <strong>Average Monetary:</strong> <span id="avgMonetary">-</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row mb-5">
        <div class="col-md-6 mb-4">
            <div class="card p-3 shadow-sm">
                <h6 class="text-center text-secondary mb-3">Customer Count by Cluster</h6>
                <canvas id="clusterChart" height="250"></canvas>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card p-3 shadow-sm">
                <h6 class="text-center text-secondary mb-3">Recency vs Frequency</h6>
                <canvas id="scatterPlot" height="250"></canvas>
            </div>
        </div>
    </div>

    <!-- Data Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title text-secondary">Customer Details</h5>
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>CustomerID</th>
                            <th>Recency (days)</th>
                            <th>Frequency</th>
                            <th>Monetary ($)</th>
                            <th>Cluster</th>
                            <th>Strategy</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const customers = JSON.parse('@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model).Replace("'", "\\'"))');
        let currentFilteredCustomers = [];

        const clusterCounts = {};
        customers.forEach(c => {
            const cl = c.Cluster;
            clusterCounts[cl] = (clusterCounts[cl] || 0) + 1;
        });

        const clusterCtx = document.getElementById('clusterChart').getContext('2d');
        const clusterChart = new Chart(clusterCtx, {
            type: 'bar',
            data: {
                labels: Object.keys(clusterCounts),
                datasets: [{
                    label: 'Number of Customers',
                    data: Object.values(clusterCounts),
                    backgroundColor: ['#4e73df', '#1cc88a', '#f6c23e', '#e74a3b', '#36b9cc']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        const scatterCtx = document.getElementById('scatterPlot').getContext('2d');
        const scatterPlot = new Chart(scatterCtx, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Recency vs Frequency',
                    data: customers.map(c => ({ x: c.Recency, y: c.Frequency })),
                    backgroundColor: 'rgba(54, 185, 204, 0.6)',
                    borderColor: 'rgba(54, 185, 204, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    x: { title: { display: true, text: 'Recency (days)' }, beginAtZero: true },
                    y: { title: { display: true, text: 'Frequency' }, beginAtZero: true }
                }
            }
        });

        function updateKPIs(data) {
            if (!data.length) {
                document.getElementById('avgRecency').textContent = '-';
                document.getElementById('avgFrequency').textContent = '-';
                document.getElementById('avgMonetary').textContent = '-';
                return;
            }

            const avg = (arr, key) => (arr.reduce((sum, item) => sum + item[key], 0) / arr.length).toFixed(2);

            document.getElementById('avgRecency').textContent = avg(data, 'Recency');
            document.getElementById('avgFrequency').textContent = avg(data, 'Frequency');
            document.getElementById('avgMonetary').textContent = avg(data, 'Monetary');
        }

        function updateScatterPlot(data) {
            scatterPlot.data.datasets[0].data = data.map(c => ({ x: c.Recency, y: c.Frequency }));
            scatterPlot.update();
        }

        function updateDashboard(selectedCluster) {
            currentFilteredCustomers = (selectedCluster === 'all')
                ? customers
                : customers.filter(c => c.Cluster.toString() === selectedCluster);

            const tbody = document.querySelector('table tbody');
            tbody.innerHTML = '';

            currentFilteredCustomers.forEach(c => {
                const row = `<tr>
                                        <td>${c.CustomerID}</td>
                                        <td>${c.Recency}</td>
                                        <td>${c.Frequency}</td>
                                        <td>${c.Monetary.toFixed(2)}</td>
                                        <td>Cluster ${c.Cluster}</td>
                                        <td>${getStrategy(c.Cluster)}</td>
                                     </tr>`;
                tbody.insertAdjacentHTML('beforeend', row);
            });

            updateKPIs(currentFilteredCustomers);

            const counts = {};
            currentFilteredCustomers.forEach(c => {
                const cl = c.Cluster;
                counts[cl] = (counts[cl] || 0) + 1;
            });
            clusterChart.data.labels = Object.keys(counts).length ? Object.keys(counts) : ['No Data'];
            clusterChart.data.datasets[0].data = Object.values(counts).length ? Object.values(counts) : [0];
            clusterChart.update();

            updateScatterPlot(currentFilteredCustomers);
        }

        function getStrategy(clusterId) {
            const strategies = {
                0: 'High Value - Retain & Reward',
                1: 'Medium Value - Engage More',
                2: 'Low Value - Re-engage Campaign',
                3: 'Lost Customers - Winback Strategy'
            };
            return strategies[clusterId] || 'Unknown';
        }

        function downloadCSV() {
            if (!currentFilteredCustomers.length) return;

            const headers = ['CustomerID', 'Recency', 'Frequency', 'Monetary', 'Cluster'];
            const rows = currentFilteredCustomers.map(c =>
                [c.CustomerID, c.Recency, c.Frequency, c.Monetary.toFixed(2), c.Cluster].join(',')
            );
            const csvContent = [headers.join(','), ...rows].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'cluster_data.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Initial load
        updateDashboard('all');
    </script>
}
